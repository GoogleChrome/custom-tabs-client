package android.support.customtabs.browseractions;

import android.content.ContentResolver;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.ParcelFileDescriptor;
import android.util.Log;

import java.io.FileDescriptor;
import java.io.FileNotFoundException;

/**
 * The {@link AsyncTask} handles:
 *  1. Inflate a fallback view when the requested image is not ready.
 *  2. Load the image from given uri generated by {@link
 *     BrowserServiceFileProvider.generateUri(Context, Bitmap, String, int, List<ResolveInfo>)}.
 *  3. Update the UI when image is ready.
 * To use this class, it requires:
 *  1. Override handlePreLoadingFallback() to inflate a fallback UI when image is not ready.
 *  2. Override onBitmapFileReady(Bitmap) to update the UI.
 */
public class BrowserServiceImageReadTask extends AsyncTask<Uri, Void, Bitmap> {
    private static final String TAG = "BrowserServiceImageReadTask";
    private final ContentResolver mResolver;

    public BrowserServiceImageReadTask(Context context) {
        super();
        mResolver = context.getContentResolver();
    }

    @Override
    protected final void onPreExecute() {
        super.onPreExecute();
        handlePreLoadingFallback();
    }

    @Override
    protected Bitmap doInBackground(Uri... params) {
        try {
            ParcelFileDescriptor descriptor = mResolver.openFileDescriptor(params[0], "r");
            if (descriptor == null) return null;
            FileDescriptor fileDescriptor = descriptor.getFileDescriptor();
            return BitmapFactory.decodeFileDescriptor(fileDescriptor);
        } catch (FileNotFoundException e) {
            Log.e(TAG, "Failed to read bitmap", e);
        }
        return null;
    }

    @Override
    protected final void onPostExecute(Bitmap bitmap) {
        onBitmapFileReady(bitmap);
    }

    /**
     * Called when bitmap image is read from disk and ready to use.
     * @param bitmap The bitmap corresponds to the given uri.
     */
    protected void onBitmapFileReady(Bitmap bitmap) {};

    /**
     * Called before bitmap image is ready to provide a fallback plan for the UI.
     */
    protected void handlePreLoadingFallback() {};
}